@using CapstoneProject.DAL
@using Castle.Core.Internal
@model CapstoneProject.ViewModels.EvaluationCreateViewModel

@{
    ViewBag.Title = "Evaluate Cohort";
}

<h2>Evaluate Cohort</h2>
<h4>Fill in the details to evaluate every employee in @TempData["CohortName"].</h4>
<label class="text-danger control-label">@TempData["StageError"]</label>
<br/>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <div class="form-group">
            @Html.LabelFor(model => model.TypeID, new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.DropDownListFor(model => model.TypeID, Model.TypeList, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TypeID, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.StageID, new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.DropDownListFor(model => model.StageID, Model.StageList, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StageID, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.OpenDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="input-group" id="openDatePicker">
                    @Html.EditorFor(model => model.OpenDate, new { htmlAttributes = new { @class = "form-control", onchange = "change(this)" } })
                    <label class="text-danger control-label">@TempData["DateError"]</label>
                </div>
                @Html.ValidationMessageFor(model => model.OpenDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CloseDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="input-group" id="closeDatePicker">
                    @Html.EditorFor(model => model.CloseDate, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.CloseDate, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.Label("Supervisors", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-1">
                @Html.EditorFor(m => m.NumberOfSupervisors, new { htmlAttributes = new { @class = "form-control", min = 0 } })
                @Html.ValidationMessageFor(model => model.NumberOfSupervisors, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.Label("Coworkers", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-1">
                @Html.EditorFor(m => m.NumberOfCoworkers, new { htmlAttributes = new { @class = "form-control", min = 0 } })
                @Html.ValidationMessageFor(model => model.NumberOfCoworkers, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Supervisees", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-1">
                @Html.EditorFor(m => m.NumberOfSupervisees, new { htmlAttributes = new { @class = "form-control", min = 0 } })
                @Html.ValidationMessageFor(model => model.NumberOfSupervisees, "", new { @class = "text-danger" })
            </div>
        </div>           

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Evaluate Cohort" class="btn btn-default"/>
            </div>
        </div>
    </div>
}

<br/>
<div>
    @Html.ActionLink("Back to Cohorts", "Index", "Cohorts")
</div>
