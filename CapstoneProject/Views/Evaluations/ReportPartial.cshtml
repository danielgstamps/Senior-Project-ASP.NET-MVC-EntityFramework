@using Castle.Core.Internal
@model CapstoneProject.ViewModels.EvaluationReportData
@Styles.Render("~/Content/ReportStyle.css")
@{ 
    var numberOfColumns = 2;
}

<h3>
    Employee @Model.EmployeeName Evaluation Report (of Evaluation @Model.TypeName @Model.StageName --generated on @Model.CurrentDate)
</h3>
<table>
    <tr>
        <th></th>
        <th>Self </th>
        @{
            var hasCoworkerColumn = false;
            var hasSuperviseeColumn = false;
        }
        @if (!Model.Raters.IsNullOrEmpty())
        {
            foreach (var rater in Model.Raters)
            {
                switch (rater.Role)
                {
                    case "Supervisor":
                        <th>Supervisor</th>
                        numberOfColumns++;
                        break;
                    case "Coworker":
                        if (!hasCoworkerColumn)
                        {
                            <th>Coworker AVG</th>
                            numberOfColumns++;
                            hasCoworkerColumn = true;
                        }
                        break;
                    case "Supervisee":
                        if (!hasSuperviseeColumn)
                        {
                            <th>Supervisee AVG</th>
                            numberOfColumns++;
                            hasSuperviseeColumn = true;
                        }
                        break;
                }
            }
        }
        <th>AVG</th>
    </tr>
    @{
        var questionNumber = 1;
    }
    @foreach (var category in Model.Categories)
    {
        <tr>
            <td></td>
            <td>
                @category.Name
            </td>
            @for (int i = 0; i < numberOfColumns - 2; i++)
            {
                <td></td>
            }
        </tr>
        for (int i = 0; i < category.Questions.Count; i++)
        {
            var answer = Model.EmployeeAnswers[questionNumber - 1];
            <tr>
                <td>
                    Question @questionNumber
                </td>
                <td>
                    @answer
                </td>
                @{ 
                    var coworkerAvgShown = false;
                    var superviseeAvgShown = false;
                }
                @if (!Model.Raters.IsNullOrEmpty())
                {
                    foreach (var rater in Model.Raters)
                    {
                        switch (rater.Role)
                        {
                            case "Supervisor":
                                <td>@Model.SupervisorAvgAnswers[questionNumber - 1]</td>
                                break;
                            case "Coworker":
                                if (!coworkerAvgShown)
                                {
                                    <td>@Model.CoworkerAvgAnswers[questionNumber - 1]</td>
                                    coworkerAvgShown = true;
                                }
                                break;
                            case "Supervisee":
                                if (!superviseeAvgShown)
                                {
                                    <td>@Model.SuperviseeAvgAnswers[questionNumber - 1]</td>
                                    superviseeAvgShown = true;
                                }
                                break;
                        }
                        @*<td>@Model.AllAvgAnswers[questionNumber - 1]</td>*@
                    }
                }
            </tr>
            questionNumber++;
        }
    }
</table>
